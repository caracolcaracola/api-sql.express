{"version":3,"file":"find-dep-package.js","sourceRoot":"","sources":["../../src/find-dep-package.ts"],"names":[],"mappings":";;;AAAA,0CAAkC;AAClC,+BAA4C;AAC5C,+CAAqC;AAErC,MAAM,SAAS,GAAG,KAAK,EAAE,CAAS,EAAoB,EAAE,CACtD,IAAA,eAAI,EAAC,CAAC,CAAC,CAAC,IAAI,CACV,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,WAAW,EAAE,EACtB,GAAG,EAAE,CAAC,KAAK,CACZ,CAAA;AAEI,MAAM,cAAc,GAAG,KAAK,EACjC,OAAsB,EACtB,UAAkB,EAClB,EAAE;IACF,kEAAkE;IAClE,KAAK,MAAM,GAAG,IAAI,IAAA,qBAAM,EAAC,IAAA,cAAO,EAAC,UAAU,CAAC,CAAC,EAAE;QAC7C,MAAM,EAAE,GAAG,IAAA,cAAO,EAAC,GAAG,EAAE,cAAc,CAAC,GAAG,UAAG,CAAA;QAC7C,qDAAqD;QACrD,4DAA4D;QAC5D,gEAAgE;QAChE,iEAAiE;QACjE,MAAM,KAAK,GACT,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAA,cAAO,EAAC,EAAE,EAAE,OAAO,CAAC,CAAC,GAAG,UAAG,CAAA;QACtE,IAAI,CAAC,CAAC,MAAM,SAAS,CAAC,KAAK,CAAC,CAAC;YAAE,SAAQ;QACvC,OAAO,KAAK,CAAA;KACb;AACH,CAAC,CAAA;AAhBY,QAAA,cAAc,kBAgB1B","sourcesContent":["import { stat } from 'fs/promises'\nimport { dirname, resolve, sep } from 'path'\nimport { walkUp } from 'walk-up-path'\n\nconst dirExists = async (f: string): Promise<boolean> =>\n  stat(f).then(\n    st => st.isDirectory(),\n    () => false\n  )\n\nexport const findDepPackage = async (\n  pkgName: string | null,\n  parentPath: string\n) => {\n  // starting from the dirname, try to find the nearest node_modules\n  for (const dir of walkUp(dirname(parentPath))) {\n    const nm = resolve(dir, 'node_modules') + sep\n    // if it's null, then we need the node_modules itself\n    // if it's '' then we use node_modules with an extra / on it\n    // thisis only relevant when generating the error message, since\n    // of course node_modules// is never going to be a valid package.\n    const ppath =\n      pkgName === null ? nm : (!pkgName ? nm : resolve(nm, pkgName)) + sep\n    if (!(await dirExists(ppath))) continue\n    return ppath\n  }\n}\n"]}