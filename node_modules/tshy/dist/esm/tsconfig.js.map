{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../src/tsconfig.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,MAAM,IAAI,CAAA;AAC9C,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAA;AACnC,OAAO,KAAK,OAAO,MAAM,cAAc,CAAA;AAEvC,uEAAuE;AACvE,OAAO,SAAS,MAAM,gBAAgB,CAAA;AAEtC,MAAM,WAAW,GAAwB;IACvC,eAAe,EAAE;QACf,WAAW,EAAE,IAAI;QACjB,cAAc,EAAE,IAAI;QACpB,eAAe,EAAE,IAAI;QACrB,gCAAgC,EAAE,IAAI;QACtC,aAAa,EAAE,IAAI;QACnB,GAAG,EAAE,OAAO;QACZ,MAAM,EAAE,UAAU;QAClB,gBAAgB,EAAE,UAAU;QAC5B,wBAAwB,EAAE,IAAI;QAC9B,iBAAiB,EAAE,IAAI;QACvB,YAAY,EAAE,IAAI;QAClB,SAAS,EAAE,IAAI;QACf,MAAM,EAAE,IAAI;QACZ,MAAM,EAAE,QAAQ;KACjB;CACF,CAAA;AAED,MAAM,KAAK,GAAwB;IACjC,OAAO,EAAE,kBAAkB;IAC3B,eAAe,EAAE;QACf,OAAO,EAAE,QAAQ;QACjB,MAAM,EAAE,QAAQ;QAChB,MAAM,EAAE,UAAU;QAClB,gBAAgB,EAAE,UAAU;KAC7B;CACF,CAAA;AAED,MAAM,QAAQ,GAAwB;IACpC,OAAO,EAAE,cAAc;IACvB,OAAO,EAAE,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,iBAAiB,CAAC;IACjE,OAAO,EAAE,CAAC,iBAAiB,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CACrD,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CACb;IACD,eAAe,EAAE;QACf,MAAM,EAAE,6BAA6B;KACtC;CACF,CAAA;AAED,MAAM,GAAG,GAAwB;IAC/B,OAAO,EAAE,cAAc;IACvB,OAAO,EAAE,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,iBAAiB,CAAC;IACjE,eAAe,EAAE;QACf,MAAM,EAAE,wBAAwB;KACjC;CACF,CAAA;AAED,UAAU,CAAC,OAAO,CAAC,CAAA;AACnB,MAAM,WAAW,GAAG,CAAC,IAAY,EAAE,IAAyB,EAAE,EAAE,CAC9D,aAAa,CACX,SAAS,IAAI,OAAO,EACpB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,IAAI,CACrC,CAAA;AAEH,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC,CAAA;AAC1D,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;IAChC,OAAO,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAA;IAC7C,WAAW,CAAC,aAAa,EAAE,WAAW,CAAC,CAAA;CACxC;AACD,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;AAC3B,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAA;AACjC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA","sourcesContent":["import chalk from 'chalk'\nimport { existsSync, writeFileSync } from 'fs'\nimport { mkdirpSync } from 'mkdirp'\nimport * as console from './console.js'\n\n// the commonjs build needs to exclude anything that will be polyfilled\nimport polyfills from './polyfills.js'\n\nconst recommended: Record<string, any> = {\n  compilerOptions: {\n    declaration: true,\n    declarationMap: true,\n    esModuleInterop: true,\n    forceConsistentCasingInFileNames: true,\n    inlineSources: true,\n    jsx: 'react',\n    module: 'nodenext',\n    moduleResolution: 'nodenext',\n    noUncheckedIndexedAccess: true,\n    resolveJsonModule: true,\n    skipLibCheck: true,\n    sourceMap: true,\n    strict: true,\n    target: 'es2022',\n  },\n}\n\nconst build: Record<string, any> = {\n  extends: '../tsconfig.json',\n  compilerOptions: {\n    rootDir: '../src',\n    target: 'es2022',\n    module: 'nodenext',\n    moduleResolution: 'nodenext',\n  },\n}\n\nconst commonjs: Record<string, any> = {\n  extends: './build.json',\n  include: ['../src/**/*.ts', '../src/**/*.cts', '../src/**/*.tsx'],\n  exclude: ['../src/**/*.mts', ...polyfills.values()].map(\n    f => `.${f}`\n  ),\n  compilerOptions: {\n    outDir: '../.tshy-build-tmp/commonjs',\n  },\n}\n\nconst esm: Record<string, any> = {\n  extends: './build.json',\n  include: ['../src/**/*.ts', '../src/**/*.mts', '../src/**/*.tsx'],\n  compilerOptions: {\n    outDir: '../.tshy-build-tmp/esm',\n  },\n}\n\nmkdirpSync('.tshy')\nconst writeConfig = (name: string, data: Record<string, any>) =>\n  writeFileSync(\n    `.tshy/${name}.json`,\n    JSON.stringify(data, null, 2) + '\\n'\n  )\n\nconsole.debug(chalk.cyan.dim('writing tsconfig files...'))\nif (!existsSync('tsconfig.json')) {\n  console.debug('using existing tsconfig.json')\n  writeConfig('../tsconfig', recommended)\n}\nwriteConfig('build', build)\nwriteConfig('commonjs', commonjs)\nwriteConfig('esm', esm)\n"]}